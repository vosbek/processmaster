version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: processmaster-db
    environment:
      POSTGRES_DB: processmaster_pro
      POSTGRES_USER: processmaster
      POSTGRES_PASSWORD: dev_password_123
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - processmaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U processmaster -d processmaster_pro"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: processmaster-api
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://processmaster:dev_password_123@db:5432/processmaster_pro
      JWT_SECRET: dev_jwt_secret_key_change_in_production
      AWS_REGION: us-east-1
      AWS_S3_BUCKET: processmaster-dev-uploads
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    networks:
      - processmaster-network
    command: npm run dev
    restart: unless-stopped

  # Frontend Web App
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: processmaster-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - processmaster-network
    command: npm run dev
    restart: unless-stopped

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: processmaster-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - processmaster-network
    command: redis-server --appendonly yes
    restart: unless-stopped

  # NGINX (reverse proxy for production)
  nginx:
    image: nginx:alpine
    container_name: processmaster-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    networks:
      - processmaster-network
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  processmaster-network:
    driver: bridge